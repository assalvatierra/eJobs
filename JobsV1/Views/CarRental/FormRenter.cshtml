@model JobsV1.Models.CarReservation



<div class="modal-body row" id="formRenter" style="padding:0px;">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal col-md-12">
            <h3>Usage Details</h3>
            <p>Fields with * are required.</p>
             <label style="color:orangered" id="dtls-warning-usage"></label>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group" style="display:none">
                <label class="control-label col-md-2"> Trans.Date* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DtTrx, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DtTrx, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="display:none">
                <label class="control-label col-md-2"> Vehicle* </label>
                <div class="col-md-10">
                    @Html.DropDownList("CarUnitId", null, htmlAttributes: new { @class = "form-control", @id = "rnt-carUnit" })
                    @Html.ValidationMessageFor(model => model.CarUnitId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group"  onchange="startDate()" >
                <label class="control-label col-md-2"> Start Date* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DtStart, new { htmlAttributes = new { @class = "form-control", @id = "rnt-startdate" } })
                    @Html.ValidationMessageFor(model => model.DtStart, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LocStart, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LocStart, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LocStart, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" onchange="startDate()" >
                <label class="control-label col-md-2"> Date End* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DtEnd, new { htmlAttributes = new { @class = "form-control", @id = "rnt-startdate" } })
                    @Html.ValidationMessageFor(model => model.DtEnd, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LocEnd, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LocEnd, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LocEnd, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="display:none">
                <label class="control-label col-md-2"> Base Rate* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BaseRate, new { htmlAttributes = new { @class = "form-control", @id = "rnt-baseRate" } })
                    @Html.ValidationMessageFor(model => model.BaseRate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="display:none">
                <label class="control-label col-md-2"> Destination* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Destinations, new { htmlAttributes = new { @class = "form-control", @id = "rnt-destination" } })
                    @Html.ValidationMessageFor(model => model.Destinations, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="display:none">
                <label class="control-label col-md-2"> Used for* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.UseFor, new { htmlAttributes = new { @class = "form-control", @id = "rnt-usedfor" } })
                    @Html.ValidationMessageFor(model => model.UseFor, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group" disabled>
                @Html.LabelFor(model => model.EstHrPerDay, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" disabled="disabled">
                    @Html.EditorFor(model => model.EstHrPerDay, new { htmlAttributes = new { @class = "form-control" , @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.EstHrPerDay, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" disabled>
                @Html.LabelFor(model => model.EstKmTravel, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EstKmTravel, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.EstKmTravel, "", new { @class = "text-danger" })
                </div>
            </div>

            <h3>Renter Details</h3>
            <p>Fields with * are required.
                <label style="color:orangered;display:none" id="dtls-warning"></label>
            </p>
            <hr />
            <div class="form-group" onchange="checkRenterDetails()">
                <label class="control-label col-md-2"> </label>
                <div class="col-md-10">
                </div>
            </div>

            <div class="form-group"  onchange="checkRenterDetails()" >
                <label class="control-label col-md-2"> Name* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RenterName, new { htmlAttributes = new { @class = "form-control" , @id = "rnt-name" } })
                    @Html.ValidationMessageFor(model => model.RenterName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2"> Company </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RenterCompany, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RenterCompany, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" onchange="checkRenterDetails()" >
                <label class="control-label col-md-2"> Email* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RenterEmail, new { htmlAttributes = new { @class = "form-control", @id = "rnt-email" } })
                    @Html.ValidationMessageFor(model => model.RenterEmail, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" onchange="checkRenterDetails()" onemptied="checkRenterDetails()" >
                <label class="control-label col-md-2"> Mobile* </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RenterMobile, new { htmlAttributes = new { @class = "form-control", @id = "rnt-mobile" } })
                    @Html.ValidationMessageFor(model => model.RenterMobile, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2"> Address </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RenterAddress, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RenterAddress, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2"> Facebook </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RenterFbAccnt, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RenterFbAccnt, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2"> Linkedln </label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RenterLinkedInAccnt, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RenterLinkedInAccnt, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Submit" class="btn btn-default disabled" id="submit-btn" onclick="LoadOverlay();" />
                </div>
            </div>

            <div class="form-group" style="visibility:hidden;height:0px;">
                <label class="control-label col-md-2">JobRefNo</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.JobRefNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.JobRefNo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" style="visibility:hidden;height:0px;">
                <label class="control-label col-md-2">SelfDrive</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SelfDrive, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SelfDrive, "", new { @class = "text-danger" })
                </div>
            </div>

            <!--
            Hidden
            -->
            <div style="display:none;">
                <input type="text" name="packageid" id="dtls-packageId" value="@ViewBag.pkgId" />
                <input type="text" name="mealAcc" id="dtls-mealsAcc" value="@ViewBag.meals" />
                <input type="text" name="fuel" id="dtls-fuel" value="@ViewBag.fuel" />
            </div>
            <br />

        </div>
    }

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}

<script type="text/javascript" src="~/Scripts/jquery-3.3.1.js"></script>
<script type="text/javascript" src="~/Scripts/Job/FormRenter.js"></script>
<script type="text/javascript" src="~/Scripts/CarRental/FormRenterValid.js"></script>

<script>
    
    /**
    * Handles Start Date of Reservation
    * start date must be 2 days from today
    * and end date must be 1 day from start date by default
    *
    */

    function startDate(){
        var sdate = Date.parse($('input[name="DtStart"]').val());
        var edate = Date.parse($('input[name="DtEnd"]').val());
        var today = new Date();

        today.setDate(today.getDate()+2);

        //reset time
        var Ssdate = getDateFormat(new Date(sdate));
        var Sedate = getDateFormat(new Date(edate));
        var Stoday = getDateFormat(today);

        //start date is greater than or equal to today
        if(Date.parse(Ssdate) >= Date.parse(Stoday))
        {
            console.log(Ssdate > Stoday);
            console.log("OK - SDATE: " + Ssdate + " >= TODAY: " + Stoday);
            $("#dtls-warning-usage").text("Invald Dates");
        
        //start date is less than today
        }else if(Date.parse(Ssdate) < Date.parse(Stoday)){

            $('input[name="DtStart"]').val(Stoday);

            console.log(Ssdate <= today); //do not accept payment
            console.log("INVALID - SDATE: " + Ssdate + " < TODAY: " + Stoday);
            $("#dtls-warning-usage").text("Invald Dates");
        }

        //handles end date, add 1 day from start date
        if(Ssdate >= Sedate){
            var endt = new Date(Ssdate);

            //endt.setDate(endt.getDate()+2);
             
            var Edate = getDateFormat(endt);

            $('input[name="DtEnd"]').val(getDateFormat(endt));
            console.log("INVALID - Ssdate: " + Ssdate + " > Sedate: " + Sedate);
            $("#dtls-warning-usage").text("Invald Dates");
        }
    }

    /**
    * Handles Start Date of Reservation
    * start date must be 2 days from today
    * and end date must be 1 day from start date by default
    *
    */

    function getDateFormat(currentDt){

        var mm = currentDt.getMonth() + 1;
        var dd = currentDt.getDate();
        var yyyy = currentDt.getFullYear();
        var fDate = mm + '/' + dd + '/' + yyyy + " 9:00 AM";

        return fDate;
    }

</script>

